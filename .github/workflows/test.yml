name: Test Workflow
on:
  workflow_dispatch:
    inputs:
      event_name:
        description: "Event name(s) - comma-separated for multiple. Example: Italian Grand Prix or Italian Grand Prix,Monaco Grand Prix. Leave empty for all events."
        required: false
        type: string
        default: ""
      session_type:
        description: "Session type(s) - comma-separated for multiple. Example: R or R,Q,S. Leave empty for all sessions."
        required: false
        type: string
        default: ""
jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 120 # 2 hours max
    steps:
      - name: Job configuration
        run: |
          # Store inputs in variables with proper quoting
          EVENT_INPUT='${{ inputs.event_name }}'
          SESSION_INPUT='${{ inputs.session_type }}'
          # Add event names if provided
          if [ -n "$EVENT_INPUT" ]; then
            # Use IFS (Internal Field Separator) to split by comma
            IFS=',' read -ra EVENTS <<< "$EVENT_INPUT"
            for event in "${EVENTS[@]}"; do
              # Trim whitespace
              event=$(echo "$event" | xargs)
              echo "--event \"$event\""
            done
          fi
          # Add session types if provided
          if [ -n "$SESSION_INPUT" ]; then
            # Replace commas with spaces
            SESSIONS=$(echo "$SESSION_INPUT" | tr ',' ' ')
            echo "--session $SESSIONS"
          fi

          # Determine scope
          if [ -n "$SESSION_INPUT" ] && [ -n "$EVENT_INPUT" ]; then
            # Count number of items
            EVENT_COUNT=$(echo "$EVENT_INPUT" | tr ',' '\n' | wc -l)
            SESSION_COUNT=$(echo "$SESSION_INPUT" | tr ',' '\n' | wc -l)
            
            if [ "$EVENT_COUNT" -eq 1 ] && [ "$SESSION_COUNT" -eq 1 ]; then
              SCOPE="Mode 1: Single Session"
            elif [ "$EVENT_COUNT" -eq 1 ] && [ "$SESSION_COUNT" -gt 1 ]; then
              SCOPE="Mode 2: Multiple Sessions from One Event"
            elif [ "$EVENT_COUNT" -gt 1 ] && [ "$SESSION_COUNT" -eq 1 ]; then
              SCOPE="Mode 3: One Session Type from Multiple Events"
            else
              SCOPE="Mode 4: Multiple Session Types from Multiple Events"
            fi
          elif [ -n "$EVENT_INPUT" ] && [ -z "$SESSION_INPUT" ]; then
            EVENT_COUNT=$(echo "$EVENT_INPUT" | tr ',' '\n' | wc -l)
            if [ "$EVENT_COUNT" -eq 1 ]; then
              SCOPE="Mode 5: All Sessions from One Event"
            else
              SCOPE="Mode 6: All Sessions from Multiple Events"
            fi
          elif [ -z "$EVENT_INPUT" ] && [ -n "$SESSION_INPUT" ]; then
            SESSION_COUNT=$(echo "$SESSION_INPUT" | tr ',' '\n' | wc -l)
            if [ "$SESSION_COUNT" -eq 1 ]; then
              SCOPE="Mode 7: One Session Type from All Events"
            else
              SCOPE="Mode 8: Multiple Session Types from All Events"
            fi
          else
            SCOPE="Mode 9: Whole Season (All Events & Sessions)"
          fi

          echo "### 🏎️ F1 Data Ingestion Configuration" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Event(s)** | ${EVENT_INPUT:-All Events (Full Season)} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Session(s)** | ${SESSION_INPUT:-All Sessions} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope** | ${SCOPE} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
